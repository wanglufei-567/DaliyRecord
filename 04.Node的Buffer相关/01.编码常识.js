/*
计算机内部，所有信息最终都是一个二进制值。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从00000000到11111111

美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为 ASCII 码，一直沿用至今。

英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。

所以出现了Unicode将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，Unicode 当然是一个很大的集合，现在的规模可以容纳100多万个符号。(0-127和ASCII一样的，所以对于英文字母来说，Unicode和ASCII一样的)

不过Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。

英文字母只需要一个字节就可以了，但是其他语言可能需要多个字节，如果都按照同一字节数来进行存储势必会造成内存浪费，所以出现了utf-8，

utf-8是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。

这里的关系是，UTF-8 是 Unicode 的实现方式之一
*/

/* ---------------------------------------------------------------------- */

/* 进制之间的转换 */
// 2进制以0b开头 8进制以0o开头 16进制以0x开头

// parseInt(string, radix) 解析一个字符串并返回指定基数的十进制整数， radix 是2-36之间的整数，表示被解析字符串的基数。
// 任意进制数据转换为10进制
console.log(parseInt('11', 2)) // 3
console.log(parseInt('0xff', 16)) // 255

// 其他进制转换
console.log((0b11).toString(10)) // 3
console.log((0xff).toString(2)) // 11111111

/* 为什么js中0.1 + 0.2 不等于0.3 */

// 小数转为二进制采用的是乘二取整法
// 0.1转换为二进制
// 0.1 * 2 = 0.2 // 0
// 0.2 * 2 = 0.4 // 0
// 0.4 * 2 = 0.8 // 0
// 0.8 * 2 = 1.6 // 1
// 0.6 * 2 = 1.2 // 1
// 0.2 * 2 = 0.4 // 0 0 1 1 这里开始无限循环了

console.log((0.1).toString(2))
// 0.0001100110011001100110011001100110011001100110011001101 这里可以发现最后进一位了，也就是转换为二进制的0.1实际上比0.1大
console.log((0.2).toString(2)) // 0.001100110011001100110011001100110011001100110011001101

console.log(0.1 + 0.2) // 0.30000000000000004

/* ----------------------------------------------------------------------- */

// 计算机中，存储的的二进制码，是一个字节（8位）一组。Base 系列编码，本质上就是将字节切片组合，然后为重组后的数字找一个对应的、可见的 ASCII 字符，这就是 Base 系列编码了。
// Base64 就是使用64（2的6次方)个字符来表示二进制数据，将原来三个字节（3X8）表示的数据用四个字节（4X6）表示；数据扩大4/3倍
// 11100111  10001111  10100000
// 1110001111000111110100000
// 111001 111000 111110 100000 再往前两位补0就变成下面这样了👇
// 00111001    00111000   00111110    00100000

console.log(parseInt('00111001',2))
console.log(parseInt('00111000',2))
console.log(parseInt('00111110',2))
console.log(parseInt('00100000',2))
// 57 56 62 32

let str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
str += str.toLowerCase();
str += '0123456789+/';


console.log('000000000',str[57] + str[56] + str[62] + str[32] );
// 54+g

// 相同的道理，Base32就是用32（2的5次方）个字符，将原来5个字节（5X8）的数据用8个字节（8X5）来表示；数据扩大8/5倍
// Base16就是用16（2的4次方）个字符，将原来1个字节（1X8）的数据用2个字节（2X4）来表示；数据扩大两倍